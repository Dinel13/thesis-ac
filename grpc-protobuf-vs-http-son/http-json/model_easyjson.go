// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package httpjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "mata_kuliahs":
			if in.IsNull() {
				in.Skip()
				out.MataKuliahs = nil
			} else {
				in.Delim('[')
				if out.MataKuliahs == nil {
					if !in.IsDelim(']') {
						out.MataKuliahs = make([]*MataKuliah, 0, 8)
					} else {
						out.MataKuliahs = []*MataKuliah{}
					}
				} else {
					out.MataKuliahs = (out.MataKuliahs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *MataKuliah
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(MataKuliah)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.MataKuliahs = append(out.MataKuliahs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"mata_kuliahs\":"
		out.RawString(prefix)
		if in.MataKuliahs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.MataKuliahs {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson(l, v)
}
func easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson1(in *jlexer.Lexer, out *MataKuliah) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kode":
			out.Kode = string(in.String())
		case "nama":
			out.Nama = string(in.String())
		case "sks":
			out.Sks = int(in.Int())
		case "dosen":
			out.Dosen = string(in.String())
		case "semester":
			out.Semester = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson1(out *jwriter.Writer, in MataKuliah) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kode\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kode))
	}
	{
		const prefix string = ",\"nama\":"
		out.RawString(prefix)
		out.String(string(in.Nama))
	}
	{
		const prefix string = ",\"sks\":"
		out.RawString(prefix)
		out.Int(int(in.Sks))
	}
	{
		const prefix string = ",\"dosen\":"
		out.RawString(prefix)
		out.String(string(in.Dosen))
	}
	{
		const prefix string = ",\"semester\":"
		out.RawString(prefix)
		out.String(string(in.Semester))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MataKuliah) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MataKuliah) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MataKuliah) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MataKuliah) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson1(l, v)
}
func easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson2(in *jlexer.Lexer, out *Krs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id_mahasiswa":
			out.IdMahasiswa = int(in.Int())
		case "mata_kuliahs":
			if in.IsNull() {
				in.Skip()
				out.MataKuliahs = nil
			} else {
				in.Delim('[')
				if out.MataKuliahs == nil {
					if !in.IsDelim(']') {
						out.MataKuliahs = make([]*MataKuliah, 0, 8)
					} else {
						out.MataKuliahs = []*MataKuliah{}
					}
				} else {
					out.MataKuliahs = (out.MataKuliahs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *MataKuliah
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(MataKuliah)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.MataKuliahs = append(out.MataKuliahs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson2(out *jwriter.Writer, in Krs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id_mahasiswa\":"
		out.RawString(prefix[1:])
		out.Int(int(in.IdMahasiswa))
	}
	{
		const prefix string = ",\"mata_kuliahs\":"
		out.RawString(prefix)
		if in.MataKuliahs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.MataKuliahs {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Krs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Krs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Krs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Krs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDinel13ThesisAcProtobufVsJsonHttpJson2(l, v)
}
